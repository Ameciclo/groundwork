---
- name: Install K3s, ArgoCD, and Kong on Azure VM
  hosts: all
  become: true
  vars:
    k3s_version: "v1.32.4+k3s1"
    argocd_version: "7.3.3"
    argocd_namespace: "argocd"
    kong_namespace: "kong"
    postgres_host: "{{ postgres_server_fqdn }}"
    postgres_user: "{{ postgres_admin_user }}"
    postgres_password: "{{ postgres_admin_password }}"
    postgres_db: "kong"

  tasks:
    - name: Update apt package index
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required dependencies
      apt:
        name:
          - curl
          - wget
          - git
          - jq
          - unzip
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
        state: present

    - name: Install kubectl
      shell: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        mv kubectl /usr/local/bin/
      args:
        creates: /usr/local/bin/kubectl

    - name: Install K3s
      shell: |
        curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="{{ k3s_version }}" sh -
      args:
        creates: /usr/local/bin/k3s
      environment:
        INSTALL_K3S_EXEC: "--disable=traefik"

    - name: Wait for K3s to be ready
      shell: |
        /usr/local/bin/k3s kubectl get nodes
      register: k3s_ready
      until: k3s_ready.rc == 0
      retries: 30
      delay: 10
      changed_when: false

    - name: Create kubeconfig for current user
      shell: |
        mkdir -p /home/azureuser/.kube
        cp /etc/rancher/k3s/k3s.yaml /home/azureuser/.kube/config
        chown -R azureuser:azureuser /home/azureuser/.kube
        chmod 600 /home/azureuser/.kube/config
      changed_when: false

    - name: Create ArgoCD namespace
      shell: |
        /usr/local/bin/k3s kubectl create namespace {{ argocd_namespace }} --dry-run=client -o yaml | /usr/local/bin/k3s kubectl apply -f -
      changed_when: false

    - name: Add ArgoCD Helm repository
      shell: |
        /usr/local/bin/k3s kubectl create serviceaccount helm-admin -n kube-system --dry-run=client -o yaml | /usr/local/bin/k3s kubectl apply -f -
      changed_when: false

    - name: Install Helm
      shell: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      args:
        creates: /usr/local/bin/helm

    - name: Add ArgoCD Helm repo
      shell: |
        /usr/local/bin/helm repo add argo https://argoproj.github.io/argo-helm
        /usr/local/bin/helm repo update
      changed_when: false

    - name: Install ArgoCD via Helm
      shell: |
        export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
        /usr/local/bin/helm install argocd argo/argo-cd \
          --namespace {{ argocd_namespace }} \
          --version {{ argocd_version }} \
          --set server.service.type=LoadBalancer \
          --set server.insecure=true \
          --wait
      register: argocd_install
      changed_when: "'deployed' in argocd_install.stdout or 'installed' in argocd_install.stdout"
      failed_when: argocd_install.rc != 0 and 'cannot re-use a name' not in argocd_install.stderr

    - name: Wait for ArgoCD server to be ready
      shell: |
        /usr/local/bin/k3s kubectl get pods -n {{ argocd_namespace }} -l app.kubernetes.io/name=argocd-server -o jsonpath='{.items[0].status.phase}'
      register: argocd_status
      until: argocd_status.stdout == "Running"
      retries: 30
      delay: 10
      changed_when: false

    - name: Get ArgoCD initial password
      shell: |
        /usr/local/bin/k3s kubectl -n {{ argocd_namespace }} get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
      register: argocd_password
      changed_when: false

    - name: Create Kong namespace
      shell: |
        /usr/local/bin/k3s kubectl create namespace {{ kong_namespace }} --dry-run=client -o yaml | /usr/local/bin/k3s kubectl apply -f -
      changed_when: false

    - name: Add Kong Helm repository
      shell: |
        /usr/local/bin/helm repo add kong https://charts.konghq.com
        /usr/local/bin/helm repo update
      changed_when: false

    - name: Create Kong values file
      copy:
        content: |
          image:
            repository: kong
            tag: "3.4"

          env:
            database: postgres
            pg_host: {{ postgres_host }}
            pg_port: 5432
            pg_user: {{ postgres_user }}
            pg_password: {{ postgres_password }}
            pg_database: {{ postgres_db }}

          service:
            type: LoadBalancer
            ports:
              http:
                port: 80
                targetPort: 8000
              https:
                port: 443
                targetPort: 8443
              admin:
                port: 8001
                targetPort: 8001

          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi

          replicaCount: 1

          postgresql:
            enabled: false
        dest: /tmp/kong-values.yaml

    - name: Install Kong via Helm
      shell: |
        export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
        /usr/local/bin/helm install kong kong/kong \
          --namespace {{ kong_namespace }} \
          --values /tmp/kong-values.yaml \
          --timeout 10m
      register: kong_install
      changed_when: "'deployed' in kong_install.stdout or 'installed' in kong_install.stdout"
      failed_when: kong_install.rc != 0 and 'cannot re-use a name' not in kong_install.stderr

    - name: Wait for Kong to be ready
      shell: |
        /usr/local/bin/k3s kubectl get pods -n {{ kong_namespace }} -l app.kubernetes.io/name=kong -o jsonpath='{.items[0].status.phase}'
      register: kong_status
      until: kong_status.stdout == "Running" or kong_status.stdout == "Pending"
      retries: 60
      delay: 5
      changed_when: false
      ignore_errors: true

    - name: Get K3s cluster info
      shell: |
        echo "=== K3s Cluster Info ==="
        /usr/local/bin/k3s kubectl cluster-info
        echo ""
        echo "=== Nodes ==="
        /usr/local/bin/k3s kubectl get nodes -o wide
        echo ""
        echo "=== ArgoCD Info ==="
        echo "Namespace: {{ argocd_namespace }}"
        echo "Initial Admin Password: {{ argocd_password.stdout }}"
        /usr/local/bin/k3s kubectl get svc -n {{ argocd_namespace }}
        echo ""
        echo "=== Kong Info ==="
        echo "Namespace: {{ kong_namespace }}"
        /usr/local/bin/k3s kubectl get svc -n {{ kong_namespace }}
      register: cluster_info
      changed_when: false

    - name: Display cluster information
      debug:
        msg: "{{ cluster_info.stdout_lines }}"
