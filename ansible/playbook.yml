---
- name: Install Docker and Portainer in Swarm mode
  hosts: all
  become: true
  vars:
    portainer_version: "2.21.3" # Pin Portainer version

  tasks:
    - name: Remove conflicting Docker repository sources (cleanup old installations)
      shell: |
        rm -f /etc/apt/sources.list.d/docker.list
        rm -f /etc/apt/sources.list.d/docker.sources
      changed_when: false

    - name: Update apt package index
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - gnupg
          - lsb-release
        state: present

    - name: Create Docker GPG keyring directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Add Docker GPG key (modern method)
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository (modern method with signed-by)
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes

    - name: Install Docker (if not already installed)
      apt:
        name: docker-ce
        state: present

    - name: Install Docker Compose (standalone)
      shell: |
        curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
      args:
        creates: /usr/local/bin/docker-compose

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Add user to Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Get private IP address (auto-detect interface)
      shell: |
        ip -4 addr show | grep -oP '(?<=inet\s)10\.\d+(\.\d+){2}' | head -1
      register: private_ip
      changed_when: false
      failed_when: private_ip.stdout == ""

    - name: Initialize Docker Swarm
      command: "docker swarm init --advertise-addr {{ private_ip.stdout }}"
      register: swarm_init
      changed_when: "'This node is already part of a swarm' not in swarm_init.stderr"
      failed_when: "swarm_init.rc != 0 and 'This node is already part of a swarm' not in swarm_init.stderr"

    - name: Create Portainer compose file
      copy:
        dest: /root/portainer-compose.yml
        content: |
          version: "3.8"
          services:
            portainer:
              image: portainer/portainer-ce:{{ portainer_version }}
              command: -H tcp://tasks.portainer_agent:9001 --tlsskipverify
              ports:
                - "9000:9000"
                - "8000:8000"
              volumes:
                - portainer_data:/data
              networks:
                - portainer_network
              deploy:
                mode: replicated
                replicas: 1
                placement:
                  constraints: [node.role == manager]
                restart_policy:
                  condition: any
                update_config:
                  parallelism: 1
                  delay: 10s

            portainer_agent:
              image: portainer/agent:{{ portainer_version }}
              environment:
                # REQUIRED: Should be equal to the service name prefixed by tasks.
                - AGENT_CLUSTER_ADDR=tasks.portainer_agent
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock
                - /var/lib/docker/volumes:/var/lib/docker/volumes
              networks:
                - portainer_network
              deploy:
                mode: global
                restart_policy:
                  condition: any
                update_config:
                  parallelism: 1
                  delay: 10s

          networks:
            portainer_network:
              driver: overlay
              attachable: true

          volumes:
            portainer_data:
              external: false

    - name: Deploy Portainer stack
      command: docker stack deploy -c /root/portainer-compose.yml portainer
      register: stack_result
      changed_when: "'Updating service' in stack_result.stdout or 'Creating service' in stack_result.stdout"

    - name: Wait for Portainer to be available
      wait_for:
        host: "{{ ansible_host }}"
        port: 9000
        delay: 15
        timeout: 600
        connect_timeout: 10

    - name: Display Portainer access information
      debug:
        msg: |
          âœ… Portainer has been deployed successfully!

          Access Portainer at: http://{{ ansible_host }}:9000

          Next steps:
          1. Open the URL above in your browser
          2. Create your admin account
          3. Connect to the Docker Swarm
          4. Start deploying your services
