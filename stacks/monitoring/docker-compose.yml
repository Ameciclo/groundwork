version: '3.8'

networks:
  monitoring:
    driver: overlay
    attachable: true

volumes:
  prometheus_data:
  grafana_data:

configs:
  prometheus_config:
    content: |
      global:
        scrape_interval: 15s
        evaluation_interval: 15s

      # Load and evaluate rules in this file
      rule_files:
        - "alert.rules"

      # A scrape configuration containing endpoints to scrape
      scrape_configs:
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']

        - job_name: 'docker'
          docker_sd_configs:
            - host: unix:///var/run/docker.sock
              refresh_interval: 15s
          relabel_configs:
            - source_labels: [__meta_docker_container_name]
              regex: '/(.*)'
              target_label: container

        - job_name: 'cadvisor'
          static_configs:
            - targets: ['cadvisor:8080']

        - job_name: 'node-exporter'
          static_configs:
            - targets: ['node-exporter:9100']

  alert_rules:
    content: |
      groups:
      - name: example
        rules:
        - alert: HighLoad
          expr: node_load1 > 0.8
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "High load on {{ $labels.instance }}"
            description: "{{ $labels.instance }} has a high load average: {{ $value }}"

        - alert: InstanceDown
          expr: up == 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Instance {{ $labels.instance }} down"
            description: "{{ $labels.instance }} has been down for more than 5 minutes."

services:
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-latest}
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
      - source: alert_rules
        target: /etc/prometheus/alert.rules
    volumes:
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - monitoring
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-latest}
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3000}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - monitoring
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:${CADVISOR_VERSION:-latest}
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "${CADVISOR_PORT:-8080}:8080"
    networks:
      - monitoring
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  node-exporter:
    image: prom/node-exporter:${NODE_EXPORTER_VERSION:-latest}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    networks:
      - monitoring
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
